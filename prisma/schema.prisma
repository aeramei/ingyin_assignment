generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  password       String
  name           String?
  role           UserRole   @default(USER)
  status         UserStatus @default(ACTIVE)
  company        String
  plan           String
  avatar         String?
  authProvider   String?
  authProviderId String?
  verified       Boolean    @default(false)

  // TOTP 2FA Fields
  totpSecret         String?   @unique
  isTOTPEnabled      Boolean   @default(false)
  totpBackupCodes    String[] // JSON array of encrypted backup codes
  totpEnabledAt      DateTime?
  lastTOTPUsedAt     DateTime?
  failedTOTPAttempts Int       @default(0)
  totpLockUntil      DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tokens        Token[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Token {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("tokens")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  details   Json?
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
